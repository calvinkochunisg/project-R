#Horizontale Linie beim Durchschnitt von IV
geom_hline(yintercept = hline_b1_check, linetype = "dotted")+
#Ausreisser
geom_point(data = analysis_max_b1_check_summary , aes(y =  b1_check_bias_mean, color = 'IV'))+
#b1 IV
geom_line(aes(y = b1_check_bias_mean, color = 'IV'))+
#b1 OLS
geom_line(aes(y = b1_hat_bias_mean, color = 'OLS'))+
#Farbe
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
ggtitle("Beta1 Bias")+
ylab("Beta1 Bias")+
xlab("Pi 1")
beta1_bias_plot
#Zoom
beta1_bias_plot+
ggtitle("Beta0 Bias Vergroessert")+
coord_cartesian(ylim=c(-0.1 , 0.5))
#Beta0 Coverage
ggplot(data = b1_data_summary, aes(x = pi1))+
geom_line(aes(y = b0_check_coverage_mean, color = 'IV'))+
geom_line(aes(y = b0_hat_coverage_mean, color = 'OLS'))+
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
geom_hline(yintercept = hline_b0_coverage, linetype = "dotted")+
ggtitle("Beta0 Coverage Rate")+
ylab("Beta0 Coverage")+
xlab("Pi 1")
#Beta1 Coverage
ggplot(data = b1_data_summary, aes(x = pi1))+
geom_line(aes(y = b1_check_coverage_mean, color = 'IV'))+
geom_line(aes(y = b1_hat_coverage_mean, color = 'OLS'))+
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
geom_hline(yintercept = hline_b1_coverage, linetype = "dotted")+
ggtitle("Beta1 Coverage Rate")+
ylab("Beta1 Coverage")+
xlab("Pi 1")
#Ausreisser
max_value_b0 <- 3
max_value_b1 <- 2
analysis_max_b0_check_summary <- filter(b1_data_summary,  (b0_check_bias_mean > max_value_b0) | (b0_check_bias_mean < -max_value_b0))
analysis_max_b1_check_summary <- filter(b1_data_summary,  (b1_check_bias_mean > max_value_b1) | (b1_check_bias_mean < -max_value_b1))
#Werte rechts von pi = 0.25
analysis_summary <- filter(b1_data_summary, pi1 > 0.25)
hline_b0_hat <- mean(analysis_summary$b0_hat_bias_mean)
hline_b0_check <- mean(analysis_summary$b0_check_bias_mean)
hline_b1_hat <- mean(analysis_summary$b1_hat_bias_mean)
hline_b1_check <- mean(analysis_summary$b1_check_bias_mean)
#H-Linien
hline_b0_coverage <- 0.925
hline_b1_coverage <- 0.925
#Colors
color_ols <- "#f78154"
color_iv <- "#4BA3C3"
#Beta0 Bias
beta0_bias_plot <- ggplot(data = b1_data_summary, aes(x = pi1))+
#Horizontale Linie beim Durchschnitt von OLS
geom_hline(yintercept = hline_b0_hat, linetype = "dotted")+
#Horizontale Linie beim Durchschnitt von IV
geom_hline(yintercept = hline_b0_check, linetype = "dotted")+
#Ausreisser
geom_point(data = analysis_max_b0_check_summary , aes(y = b0_check_bias_mean, color = 'IV'))+
#b0 IV
geom_line(aes(y = b0_check_bias_mean, color = 'IV'))+
#b0 OLS
geom_line(aes(y = b0_hat_bias_mean, color = 'OLS'))+
#Farbe
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
ggtitle("Beta0 Bias")+
ylab("Beta0 Bias")+
xlab("Pi 1")
beta0_bias_plot
#Zoom
beta0_bias_plot+
ggtitle("Beta0 Bias Vergroessert")+
coord_cartesian(ylim=c(-1 , 2.5))
#Beta1 Bias
beta1_bias_plot <- ggplot(data = b1_data_summary, aes(x = pi1))+
#Horizontale Linie beim Durchschnitt von OLS
geom_hline(yintercept = hline_b1_hat, linetype = "dotted")+
#Horizontale Linie beim Durchschnitt von IV
geom_hline(yintercept = hline_b1_check, linetype = "dotted")+
#Ausreisser
geom_point(data = analysis_max_b1_check_summary , aes(y =  b1_check_bias_mean, color = 'IV'))+
#b1 IV
geom_line(aes(y = b1_check_bias_mean, color = 'IV'))+
#b1 OLS
geom_line(aes(y = b1_hat_bias_mean, color = 'OLS'))+
#Farbe
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
ggtitle("Beta1 Bias")+
ylab("Beta1 Bias")+
xlab("Pi 1")
beta1_bias_plot
#Zoom
beta1_bias_plot+
ggtitle("Beta0 Bias Vergroessert")+
coord_cartesian(ylim=c(-0.1 , 0.2))
#Beta0 Coverage
ggplot(data = b1_data_summary, aes(x = pi1))+
geom_line(aes(y = b0_check_coverage_mean, color = 'IV'))+
geom_line(aes(y = b0_hat_coverage_mean, color = 'OLS'))+
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
geom_hline(yintercept = hline_b0_coverage, linetype = "dotted")+
ggtitle("Beta0 Coverage Rate")+
ylab("Beta0 Coverage")+
xlab("Pi 1")
#Beta1 Coverage
ggplot(data = b1_data_summary, aes(x = pi1))+
geom_line(aes(y = b1_check_coverage_mean, color = 'IV'))+
geom_line(aes(y = b1_hat_coverage_mean, color = 'OLS'))+
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
geom_hline(yintercept = hline_b1_coverage, linetype = "dotted")+
ggtitle("Beta1 Coverage Rate")+
ylab("Beta1 Coverage")+
xlab("Pi 1")
#Ausreisser
max_value_b0 <- 3
max_value_b1 <- 2
analysis_max_b0_check_summary <- filter(b1_data_summary,  (b0_check_bias_mean > max_value_b0) | (b0_check_bias_mean < -max_value_b0))
analysis_max_b1_check_summary <- filter(b1_data_summary,  (b1_check_bias_mean > max_value_b1) | (b1_check_bias_mean < -max_value_b1))
#Werte rechts von pi = 0.25
analysis_summary <- filter(b1_data_summary, pi1 > 0.25)
hline_b0_hat <- mean(analysis_summary$b0_hat_bias_mean)
hline_b0_check <- mean(analysis_summary$b0_check_bias_mean)
hline_b1_hat <- mean(analysis_summary$b1_hat_bias_mean)
hline_b1_check <- mean(analysis_summary$b1_check_bias_mean)
#H-Linien
hline_b0_coverage <- 0.925
hline_b1_coverage <- 0.925
#Colors
color_ols <- "#f78154"
color_iv <- "#4BA3C3"
#Beta0 Bias
beta0_bias_plot <- ggplot(data = b1_data_summary, aes(x = pi1))+
#Horizontale Linie beim Durchschnitt von OLS
geom_hline(yintercept = hline_b0_hat, linetype = "dotted")+
#Horizontale Linie beim Durchschnitt von IV
geom_hline(yintercept = hline_b0_check, linetype = "dotted")+
#Ausreisser
geom_point(data = analysis_max_b0_check_summary , aes(y = b0_check_bias_mean, color = 'IV'))+
#b0 IV
geom_line(aes(y = b0_check_bias_mean, color = 'IV'))+
#b0 OLS
geom_line(aes(y = b0_hat_bias_mean, color = 'OLS'))+
#Farbe
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
ggtitle("Beta0 Bias")+
ylab("Beta0 Bias")+
xlab("Pi 1")
beta0_bias_plot
#Zoom
beta0_bias_plot+
ggtitle("Beta0 Bias Vergroessert")+
coord_cartesian(ylim=c(-1 , 2.5))
#Beta1 Bias
beta1_bias_plot <- ggplot(data = b1_data_summary, aes(x = pi1))+
#Horizontale Linie beim Durchschnitt von OLS
geom_hline(yintercept = hline_b1_hat, linetype = "dotted")+
#Horizontale Linie beim Durchschnitt von IV
geom_hline(yintercept = hline_b1_check, linetype = "dotted")+
#Ausreisser
geom_point(data = analysis_max_b1_check_summary , aes(y =  b1_check_bias_mean, color = 'IV'))+
#b1 IV
geom_line(aes(y = b1_check_bias_mean, color = 'IV'))+
#b1 OLS
geom_line(aes(y = b1_hat_bias_mean, color = 'OLS'))+
#Farbe
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
ggtitle("Beta1 Bias")+
ylab("Beta1 Bias")+
xlab("Pi 1")
beta1_bias_plot
#Zoom
beta1_bias_plot+
ggtitle("Beta0 Bias Vergroessert")+
coord_cartesian(ylim=c(-0.1 , 0.1))
#Beta0 Coverage
ggplot(data = b1_data_summary, aes(x = pi1))+
geom_line(aes(y = b0_check_coverage_mean, color = 'IV'))+
geom_line(aes(y = b0_hat_coverage_mean, color = 'OLS'))+
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
geom_hline(yintercept = hline_b0_coverage, linetype = "dotted")+
ggtitle("Beta0 Coverage Rate")+
ylab("Beta0 Coverage")+
xlab("Pi 1")
#Beta1 Coverage
ggplot(data = b1_data_summary, aes(x = pi1))+
geom_line(aes(y = b1_check_coverage_mean, color = 'IV'))+
geom_line(aes(y = b1_hat_coverage_mean, color = 'OLS'))+
scale_color_manual(name = 'Methode',
breaks=c('IV', 'OLS'),
values=c('IV'=color_iv, 'OLS'=color_ols))+
geom_hline(yintercept = hline_b1_coverage, linetype = "dotted")+
ggtitle("Beta1 Coverage Rate")+
ylab("Beta1 Coverage")+
xlab("Pi 1")
setwd("D:/OneDrive - Universität St.Gallen/Universität/1. HS 22/Programmieren/project-R")
#get the information to look up historical price date in API
token <- "drj71x0ytu" #enter the personalized token from Stock Shark
dataType <- "getHistoricalPrice" #specify the type of data to retrieve (show a list of available data types)
ticker <- "SPX" #Stock Ticker Symbol (maybe also show a list of available Tickers)
startDate <- "2000-01-01" #Set a Start-Date for the date range of the data
endDate <- "2022-01-01" #Set an End-Date for the date range of the data
periodType <- "daily" #set the resolution of the time axis (show a list of available periods)
api_url <- paste(
"https://stock-shark.com/api/v1/",
dataType, "?",
"startDate=",  startDate,
"&endDate=", endDate,
"&ticker=", ticker,
"token={", token,"}",
"&periodType=", periodType,
sep="")
api_url
#install all required r-packages
install.packages("httr")
install.packages("jsonlite")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
raw_data <- httr :: GET(api_url)
str(raw_data)
View(raw_data)
raw_data[["content"]]
str(raw_data$content)
httr::content(raw_data, as = 'text')
api_url
#get the information to look up historical price date in API
token <- "drj71x0ytu" #enter the personalized token from Stock Shark
dataType <- "getHistoricalPrice" #specify the type of data to retrieve (show a list of available data types)
ticker <- "SPX" #Stock Ticker Symbol (maybe also show a list of available Tickers)
startDate <- "2000-01-01" #Set a Start-Date for the date range of the data
endDate <- "2022-01-01" #Set an End-Date for the date range of the data
periodType <- "daily" #set the resolution of the time axis (show a list of available periods)
api_url <- paste(
"https://stock-shark.com/api/v1/",
dataType, "?",
"startDate=",  startDate,
"&endDate=", endDate,
"&ticker=", ticker,
"&token={", token,"}",
"&periodType=", periodType,
sep=""
)
raw_data <- httr :: GET(api_url)
httr::content(raw_data, as = 'text')
token <- "drj71x0ytu" #enter the personalized token from Stock Shark
dataType <- "getHistoricalPrice" #specify the type of data to retrieve (show a list of available data types)
ticker <- "SPX" #Stock Ticker Symbol (maybe also show a list of available Tickers)
startDate <- "2020-01-01" #Set a Start-Date for the date range of the data
endDate <- "2022-01-01" #Set an End-Date for the date range of the data
periodType <- "daily" #set the resolution of the time axis (show a list of available periods)
api_url <- paste(
"https://stock-shark.com/api/v1/",
dataType, "?",
"startDate=",  startDate,
"&endDate=", endDate,
"&ticker=", ticker,
"&token={", token,"}",
"&periodType=", periodType,
sep=""
)
raw_data <- httr :: GET(api_url)
httr::content(raw_data, as = 'text')
token <- "drj71x0ytu" #enter the personalized token from Stock Shark
dataType <- "getHistoricalPrice" #specify the type of data to retrieve (show a list of available data types)
ticker <- "SPX" #Stock Ticker Symbol (maybe also show a list of available Tickers)
startDate <- "2020-01-01" #Set a Start-Date for the date range of the data
endDate <- "2022-01-01" #Set an End-Date for the date range of the data
periodType <- "daily" #set the resolution of the time axis (show a list of available periods)
api_url <- paste(
"https://stock-shark.com/api/v1/",
dataType, "?",
"startDate=",  startDate,
"&endDate=", endDate,
"&ticker=", ticker,
"&token=", token,
"&periodType=", periodType,
sep=""
)
raw_data <- httr :: GET(api_url)
httr::content(raw_data, as = 'text')
content <- httr::content(raw_data, as = 'text')
str(content)
token <- "drj71x0ytu" #enter the personalized token from Stock Shark
dataType <- "getHistoricalPrice" #specify the type of data to retrieve (show a list of available data types)
ticker <- "SPX" #Stock Ticker Symbol (maybe also show a list of available Tickers)
startDate <- "2020-01-01" #Set a Start-Date for the date range of the data
endDate <- "2022-01-01" #Set an End-Date for the date range of the data
periodType <- "daily" #set the resolution of the time axis (show a list of available periods)
api_url <- paste(
"https://stock-shark.com/api/v1/",
dataType, "?",
"startDate=",  startDate,
"&endDate=", endDate,
"&ticker=", ticker,
"&token=", token,
"&periodType=", periodType,
sep=""
)
raw_data <- httr :: GET(api_url)
content <- httr::content(raw_data, as = 'text')
str(content)
content <- httr::content(raw_data, as = 'text')
str(content)
content
json_content <- jsonlite::fromJSON(content)
View(json_content)
dplyr::glimpse(json_content)
candles <- json_content$candles
candles <- json_content$data$candles
View(candles)
dplyr::glimpse(candles)
View(candles)
View(candles)
api_url
token <- "drj71x0ytu" #enter the personalized token from Stock Shark
dataType <- "getHistoricalPrice" #specify the type of data to retrieve (show a list of available data types)
ticker <- "SPY" #Stock Ticker Symbol (maybe also show a list of available Tickers)
startDate <- "2020-01-01" #Set a Start-Date for the date range of the data
endDate <- "2022-01-01" #Set an End-Date for the date range of the data
periodType <- "daily" #set the resolution of the time axis (show a list of available periods)
api_url <- paste(
"https://stock-shark.com/api/v1/",
dataType, "?",
"startDate=",  startDate,
"&endDate=", endDate,
"&ticker=", ticker,
"&token=", token,
"&periodType=", periodType,
sep=""
)
raw_data <- httr :: GET(api_url)
content <- httr::content(raw_data, as = 'text')
json_content <- jsonlite::fromJSON(content)
dplyr::glimpse(json_content)
candles <- json_content$data$candles
dplyr::glimpse(candles)
api_url
View(candles)
token <- "drj71x0ytu" #enter the personalized token from Stock Shark
dataType <- "getHistoricalPrice" #specify the type of data to retrieve (show a list of available data types)
ticker <- "NDX" #Stock Ticker Symbol (maybe also show a list of available Tickers)
startDate <- "2020-01-01" #Set a Start-Date for the date range of the data
endDate <- "2022-01-01" #Set an End-Date for the date range of the data
periodType <- "daily" #set the resolution of the time axis (show a list of available periods)
api_url <- paste(
"https://stock-shark.com/api/v1/",
dataType, "?",
"startDate=",  startDate,
"&endDate=", endDate,
"&ticker=", ticker,
"&token=", token,
"&periodType=", periodType,
sep=""
)
raw_data <- httr :: GET(api_url)
content <- httr::content(raw_data, as = 'text')
json_content <- jsonlite::fromJSON(content)
dplyr::glimpse(json_content)
candles <- json_content$data$candles
dplyr::glimpse(candles)
api_url
#get the information to look up historical price date in API
token <- "drj71x0ytu" #enter the personalized token from Stock Shark
dataType <- "getHistoricalPrice" #specify the type of data to retrieve (show a list of available data types)
ticker <- "SPY" #Stock Ticker Symbol (maybe also show a list of available Tickers)
startDate <- "2020-01-01" #Set a Start-Date for the date range of the data
endDate <- "2022-01-01" #Set an End-Date for the date range of the data
periodType <- "daily" #set the resolution of the time axis (show a list of available periods)
api_url <- paste(
"https://stock-shark.com/api/v1/",
dataType, "?",
"startDate=",  startDate,
"&endDate=", endDate,
"&ticker=", ticker,
"&token=", token,
"&periodType=", periodType,
sep=""
)
raw_data <- httr :: GET(api_url)
content <- httr::content(raw_data, as = 'text')
json_content <- jsonlite::fromJSON(content)
dplyr::glimpse(json_content)
candles <- json_content$data$candles
dplyr::glimpse(candles)
api_url
content <- httr::content(raw_data, as = 'text')
json_content <- jsonlite::fromJSON(content)
dplyr::glimpse(json_content)
candles <- json_content$data$candles
dplyr::glimpse(candles)
View(candles)
install.packages("lubridate")
install.packages("lubridate")
data$datetime <- ymd(data$datetime)
data$datetime <- as.Date(data$datetime)
data$datetime <- as_datetime(data$datetime)
data$datetime <- as.datetime(data$datetime)
data$datetime <- as.Date.character(data$datetime)
load(httr)
load('httr')
library('httr')
library('jsonlite')
library('httr')
library('jsonlite')
library('dplyr')
library('lubridate')
install.packages("tidyverse")
library('tidyverse')
data$datetime <- as.Date(data$datetime)
date <- as.Date(data$datetime)
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
candleStick_plot
candleStick_plot<-function(ticker,startDate,endDate){
tq_get(ticker,
startDate = startDate,
endDate = endDate,
warnings = FALSE) %>%
mutate(greenRed=ifelse(open-close>0,
"Red",
"Green")) %>%
ggplot()+
geom_segment(aes(x = date,
xend=date,
y =open,
yend =close,
colour=greenRed),
size=3)+
theme_tq()+
geom_segment(aes(x = date,
xend=date,
y =high,
yend =low,
colour=greenRed))+
scale_color_manual(values=c("Forest Green","Red"))+
ggtitle(paste0(ticker," (",startDate," - ",endDate,")"))+
theme(legend.position ="none",
axis.title.y = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title= element_text(hjust=0.5))
}
candleStick_plot
candleStick_plot("BTC-USD",from = '2021-07-01',to = lubridate::today())
candleStick_plot("BTC-USD",startDate = '2021-07-01',endDate = lubridate::today())
# The function
candleStick_plot<-function(ticker,startDate,endDate){
tq_get(ticker,
startDate = startDate,
endDate = endDate,
warnings = FALSE)
mutate(greenRed=ifelse(open-close>0,
"Red",
"Green"))
ggplot()+
geom_segment(aes(x = date,
xend=date,
y =open,
yend =close,
colour=greenRed),
size=3)+
theme_tq()+
geom_segment(aes(x = date,
xend=date,
y =high,
yend =low,
colour=greenRed))+
scale_color_manual(values=c("Forest Green","Red"))+
ggtitle(paste0(ticker," (",startDate," - ",endDate,")"))+
theme(legend.position ="none",
axis.title.y = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
plot.title= element_text(hjust=0.5))
}
candleStick_plot("BTC-USD",startDate = '2021-07-01',endDate = lubridate::today())
candlechart <- function(ticker, startDate, endDate) {
low_min <- min(candles$low)
high_max <- max(candles$high)
candles %>%
ggplot(aes(x = date, y = close, title = ticker)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
geom_ma(color = "darkgreen") +
coord_x_date(xlim = c(startDate, endDate),
ylim = c(low_min, high_max))
}
candlechart(ticker, startDate, endDate)
